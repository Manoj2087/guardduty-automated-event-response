AWSTemplateFormatVersion: 2010-09-09
Description: GuardDuty Automatic event response

Parameters: 
  QuarantineSecurityGroupName:
    Description: GuardDuty Quarantine Security Group Name.
      This security Group to block all inbound and outbount traffic
      will be applied to compromised EC2 instance. If this security group
      does not already exist in the VPC it will be created.    
    Type: String
    Default: guardduty-quarantine

Resources:
  GuardDutyAutoResponseLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref AWS::StackName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Path: /
      Policies:
        - PolicyName: lambda-execution-policy           
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "ec2:*"
                Resource: "*"
              - Effect: Allow
                Action: "logs:*"
                Resource: "*"

  GuardDutyAutoResponseLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Description: GuardDuty Automatic event response
      Environment:
        Variables: 
          QuarantineSecurityGroup : !Ref QuarantineSecurityGroupName
      FunctionName: !Ref AWS::StackName
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt GuardDutyAutoResponseLambdaExecRole.Arn
      Runtime: python2.7
      Timeout: 300
      Code: 
        ZipFile: |
          import json
          import boto3
          from botocore.exceptions import ClientError
          import os

          eventTypes = [
            'Recon:EC2/Portscan',
            'Recon:EC2/PortProbeUnprotectedPort',
            'CryptoCurrency:EC2/BitcoinTool.B!DNS',
            'CryptoCurrency:EC2/BitcoinTool.B',
            'UnauthorizedAccess:EC2/SSHBruteForce',
            'UnauthorizedAccess:EC2/RDPBruteForce',
            'Trojan:EC2/DNSDataExfiltration'
          ]

          def validateSecurityGroups(vpcId, region):
            quarantineSecurityGroup = os.environ['QuarantineSecurityGroup']
            securityGroupList = []
            securityGroupClient = boto3.client('ec2', region_name=region)
            # List all security group in the VPC
            securityGroups = securityGroupClient.describe_security_groups(
              Filters=[
                {
                  'Name': 'vpc-id',
                  'Values': [
                    vpcId,
                  ],
                  'Name': 'group-name',
                  'Values': [
                    quarantineSecurityGroup,
                  ]
                },
              ]
            )
            print(securityGroups['SecurityGroups'])
            if not (securityGroups['SecurityGroups']):
              # if the list is empty. The secuirty group does not exists.
              # Better create a new security group with no inbound and outbound...
              # Create Security Group
              print("Creating a security group " + quarantineSecurityGroup)
              response = securityGroupClient.create_security_group(
                Description='GuardDuty Quarantine Security Group',
                GroupName=quarantineSecurityGroup,
                VpcId='vpc-04d9d9f179efca5db'
              )
              # Remove the default egress Rule
              ec2 = boto3.resource('ec2', region_name=region)
              securityGroupResource = ec2.SecurityGroup(response['GroupId'])
              securityGroupResource.revoke_egress(
                IpPermissions=[
                  {
                    'FromPort': -1,
                    'IpProtocol': '-1',
                    'IpRanges': [
                      {
                        'CidrIp': '0.0.0.0/0'
                      },
                    ],
                    'ToPort': -1

                  },
                ]
              )
              return response['GroupId']
            else:
              # if the list is not empty. The secuirty group exists. Return the GroupID 
              return securityGroups['SecurityGroups'][0]['GroupId']

          def evaluate(gdType, region, instanceId, interfaces, securityGroupId):
            ec2Client = boto3.client('ec2', region_name=region)
            instances = [instanceId]
            if gdType in eventTypes:
              print(str(gdType) + ' was found in the eventTypes array')
              ec2Client.create_tags(Resources=instances, Tags=[{'Key': 'GuardDuty Status', 'Value': 'Quarantined'}])
              for iface in interfaces:
                print('Interface ' + iface)
                print('Security Group ' + securityGroupId)
                ec2Client.modify_network_interface_attribute(DryRun=False, Groups=[securityGroupId], NetworkInterfaceId=iface)

          def lambda_handler(event, context):
            try:
              print("Quarantine Security Group = " + os.environ['QuarantineSecurityGroup'] )
              guardDutyFindingType = event['detail']['type']
              region = event['detail']['region']
              instanceId = event['detail']['resource']['instanceDetails']['instanceId']
              vpcId = event['detail']['resource']['instanceDetails']['networkInterfaces'][0]['vpcId']
              interfaces = []
              for interface in event['detail']['resource']['instanceDetails']['networkInterfaces']:
                interfaces.append(interface['networkInterfaceId'])
                
              securityGroupId = validateSecurityGroups(vpcId, region)
              print('Security group ID returned is: ' + securityGroupId)

              evaluate(guardDutyFindingType, region, instanceId, interfaces, securityGroupId)
            
              return {
                'statusCode': 200,
                'body': json.dumps('Execution complete. Further detail can be found in CloudWatch Logs')
              }
            except Exception as e:
              raise e

  GuardDutyEventLambdaInvokePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt GuardDutyAutoResponseLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GuardDutyEventRule.Arn 

  GuardDutySNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      TopicName: !Ref AWS::StackName
      DisplayName: GuardDutySNSTopic

  GuardDutyEventSNSTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: !Ref GuardDutySNSTopic
      Topics:
        - !Ref GuardDutySNSTopic

  GuardDutyEventRule: 
    Type: AWS::Events::Rule
    Properties:
      Name: !Ref AWS::StackName 
      Description: "GuardDutyEventRule"
      EventPattern: |
        {
          "source": [
            "aws.guardduty"
          ],
          "detail-type": [
            "GuardDuty Finding"
          ],
          "detail": {
            "severity": [
              5,
              8
            ],
            "type": [
              "Recon:EC2/Portscan",
              "Recon:EC2/PortProbeUnprotectedPort",
              "CryptoCurrency:EC2/BitcoinTool.B!DNS",
              "CryptoCurrency:EC2/BitcoinTool.B",
              "UnauthorizedAccess:EC2/SSHBruteForce",
              "UnauthorizedAccess:EC2/RDPBruteForce",
              "Trojan:EC2/DNSDataExfiltration"
            ]
          }
        }
      State: "ENABLED"
      Targets: 
        - Arn: !Ref GuardDutySNSTopic
          Id: GuardDutySNSTopic
          InputTransformer:
            InputPathsMap: 
              severity : "$.detail.severity"
              instanceId : "$.detail.resource.instanceDetails.instanceId"
              time : "$.time"
              region : "$.region"
              type : "$.detail.type"
              account : "$.detail.accountId"
            InputTemplate: '"You are receiving this alert because an event with a 
            severity level of <severity> was recorded by GuardDuty for your AWS account <account>. 
            The finding was recorded in <region> at <time> for Instance ID <instanceId>."'
        - Arn: !GetAtt GuardDutyAutoResponseLambda.Arn
          Id: GuardDutyLambdaExecution

